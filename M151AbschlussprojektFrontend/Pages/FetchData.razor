@page "/fetchData"
@inject HttpClient Http
@inject IConfiguration Config

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<table class="table">
        <thead>
        <tr>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
        <tr>
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
        </tr>
        }
        </tbody>
        </table>*@
    @foreach (var forecast in forecasts.incidents)
    {
        <p>@forecast.properties.from</p>
        <p>@forecast.properties.to</p>
    }
}

@code {
    private Traffic? forecasts;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<Traffic>("https://api.tomtom.com/traffic/services/5/incidentDetails?key=CFSNkPl1ywmPJqNtxODTtiCO0SEcCAVn&bbox=8.4315003003,47.0803072321,8.9725769604,47.5476845775&fields={incidents{type,geometry{type,coordinates},properties{id,iconCategory,magnitudeOfDelay,events{description,code},startTime,endTime,from,to,length,delay,roadNumbers,timeValidity,aci{probabilityOfOccurrence,numberOfReports,lastReportTime},tmc{countryCode,tableNumber,tableVersion,direction,points{location,offset}}}}}&language=de-DE");
        //var response = await Http.GetAsync($"{Config["openWeatherApi:baseUrl"]}/onecall?lat=47.14237009806472&lon=8.636668156694977&exclude=current,minutely,daily,alerts&appid={Config["openWeatherApi:apiKey"]}&units=metric&lang=de");
        //var responseBody = await response.Content.ReadAsStringAsync();
        //Console.WriteLine(responseBody);

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
